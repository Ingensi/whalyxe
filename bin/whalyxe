#!/usr/bin/ruby

# Dependencies
require 'yaml'
require 'logger'
require 'erubis'
require 'fileutils'
require 'webrick'

# Folders constants
PATHS = {
    whalyxe: '/etc/whalyxe',
    lib: '/usr/lib/whalyxe',
    logs: '/etc/whalyxe/logs',
    dhcp: {
        config: '/etc/dhcp/dhcpd.conf',
        bin: '/usr/sbin/dhcpd',
        pid: '/var/run/dhcpd.pid'
    }
}

BINARIES = {
    tftp: "/usr/sbin/in.tftpd -l -R 4096:32767 -s #{PATHS[:whalyxe]}/tftp",
    dhcp: "#{PATHS[:dhcp][:bin]} -f -cf #{PATHS[:dhcp][:config]} -pf #{PATHS[:dhcp][:pid]}"
}

# Whalyxe constants
WHALYXE = {
    version: '1.0.0',
    config: YAML.load_file("#{PATHS[:whalyxe]}/whalyxe.conf"),
    tftp_root: "#{PATHS[:whalyxe]}/tftp",
    folders: {
        www: "#{PATHS[:whalyxe]}/www"
    },
    logs: {
        dhcp: File.open("#{PATHS[:logs]}/dhcp.log", 'w'),
        http: File.open("#{PATHS[:logs]}/http.log", 'w'),
        tftp: File.open("#{PATHS[:logs]}/tftp.log", 'w')
    }
}

# Logging helper
LOGGER = Logger.new(STDOUT)
LOGGER.level = case WHALYXE[:config]['log_level']
                 when 'debug'
                   Logger::DEBUG
                 when 'info'
                   Logger::INFO
                 else
                   Logger::WARN
               end

# Compiling DHCP configuration file
def configure_dhcp
  LOGGER.info 'Compiling dhcp config file'
  # Generating file from template
  config = Erubis::Eruby.new(File.read "#{PATHS[:lib]}/template/dhcpd.conf.erb").result({dhcp: WHALYXE[:config]['dhcp']})
  # Writing file
  File.write PATHS[:dhcp][:config], config
  LOGGER.debug "Compiled dhcp config file :\n\n#{config}\n"
  LOGGER.info 'Done compiling dhcp config file'
rescue
  LOGGER.fatal 'An error occurred while compiling dhcp config file. Aborting...'
  exit 1
end

# Reset a directory from its library counterpart
def copy_from_lib(folder_name)
  LOGGER.warn "Reset #{PATHS[:whalyxe]}/#{folder_name} to its default content"
  `rm -rf #{PATHS[:whalyxe]}/#{folder_name}`
  `mkdir #{PATHS[:whalyxe]}/#{folder_name}`
  `cp -R #{PATHS[:lib]}/#{folder_name}/* #{PATHS[:whalyxe]}/#{folder_name}/`
end

# React on args
def parse_args
  if ARGV.include? '--reset-www'
    copy_from_lib 'www'
  end
  if ARGV.include? '--reset-tftp'
    copy_from_lib 'tftp'
  end
end

# Bundled HTTP Server to serve iPXE files
class HttpServer
  # Main server servlet
  class IpxeServlet < WEBrick::HTTPServlet::AbstractServlet
    def do_GET (request, response)
      response.content_type = 'text/plain'
      file_path = if request.path == '/'
                    "#{WHALYXE[:folders][:www]}/start.ipxe"
                  else
                    "#{WHALYXE[:folders][:www]}/#{request.path}"
                  end
      erb_file_path = "#{file_path}.erb"
      if File.exist? file_path
        response.status = 200
        response.body = File.read file_path
      elsif file_path.end_with? '.ipxe' and File.exist? erb_file_path
        begin
          LOGGER.debug "Loading dynamic file : #{request.path}.erb"
          response.status = 200
          response.body = Erubis::Eruby.new(File.read erb_file_path).result({})
        rescue
          response.status = 500
        end
      else
        response.status = 404
      end
    end
  end
  # Initialize WEBrick server
  def init
    server = WEBrick::HTTPServer.new(
        Port: 80,
        Logger: WEBrick::Log.new(WHALYXE[:logs][:http])
    )
    server.mount '/', IpxeServlet
    server.start
    LOGGER.info 'HTTP server started up !'
  end
end

# Entry point
def main
  parse_args
  LOGGER.info "Starting up Whalyxe, version #{WHALYXE[:version]} !"
  # Compile dhcp server configuration
  configure_dhcp
  # Start dhcpd server
  LOGGER.info 'Starting up external dhcp server (ISC DHCP Server)'
  Process.spawn BINARIES[:dhcp], out: WHALYXE[:logs][:dhcp], err: WHALYXE[:logs][:dhcp]
  # Start tftp server
  LOGGER.info 'Starting up external tftp server (tftp-hpa)'
  Process.spawn BINARIES[:tftp], out: WHALYXE[:logs][:tftp], err: WHALYXE[:logs][:tftp]
  # Start http server
  LOGGER.info 'Starting up bundled http server (WEBrick)'
  HttpServer.new.init
  # Keeping main process running so the container wont close
  sleep
rescue
  LOGGER.fatal 'Something nasty happened to Whalyxe... this is... bad...'
  exit 2
end

main
exit 0